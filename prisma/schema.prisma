generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")
  
  // Relations
  memoryLanes MemoryLane[]
  
  @@map("User")
}

model MemoryLane {
  id            String   @id @default(cuid())
  userId        String   // Added for user-scoped data
  slug          String   @unique
  title         String
  description   String?
  coverImageUrl String?
  createdAt     DateTime @default(now()) @map("createdAt")
  updatedAt     DateTime @updatedAt @map("updatedAt")
  
  // Relations
  user     User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  memories Memory[]
  tags     LaneTag[]
  
  @@map("MemoryLane")
}

model Memory {
  id          String   @id @default(cuid())
  laneId      String
  title       String
  description String?
  occurredAt  DateTime @map("occurredAt")
  sortIndex   Int      @default(0) @map("sortIndex")
  createdAt   DateTime @default(now()) @map("createdAt")
  updatedAt   DateTime @updatedAt @map("updatedAt")
  
  // Relations
  lane   MemoryLane    @relation(fields: [laneId], references: [id], onDelete: Cascade)
  images MemoryImage[]
  
  @@map("Memory")
}

model MemoryImage {
  id        String   @id @default(cuid())
  memoryId  String   @map("memoryId")
  url       String
  alt       String?
  sortIndex Int      @default(0) @map("sortIndex")
  createdAt DateTime @default(now()) @map("createdAt")
  
  // Relations
  memory Memory @relation(fields: [memoryId], references: [id], onDelete: Cascade)
  
  @@map("MemoryImage")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  color     String   @default("#3B82F6")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")
  
  // Relations
  lanes LaneTag[]
  
  @@map("Tag")
}

model LaneTag {
  laneId String
  tagId  String
  
  // Relations
  lane MemoryLane @relation(fields: [laneId], references: [id], onDelete: Cascade)
  tag  Tag        @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([laneId, tagId])
  @@map("LaneTag")
}